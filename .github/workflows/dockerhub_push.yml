name: Build and Push Docker Image

on:
  push:
    branches:
      - main  
jobs:
  build-and-push-to-dockerhub:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up Docker image tag
        id: vars
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          echo "IMAGE_TAG=v${TIMESTAMP}" >> $GITHUB_OUTPUT

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKENÂ }}
          
      - name: Build and tag Docker images
        run: |
          cd flask-app
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/api_app:${{ steps.vars.outputs.IMAGE_TAG }} .
          docker tag ${{ secrets.DOCKERHUB_USERNAME }}/api_app:${{ steps.vars.outputs.IMAGE_TAG }} ${{ secrets.DOCKERHUB_USERNAME }}/api_app:latest
          docker images

      - name: Push Docker images to Docker Hub
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/api_app:${{ steps.vars.outputs.IMAGE_TAG }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/api_app:latest

  cleanup-old-tags:
    runs-on: ubuntu-latest
    needs: build-and-push-to-dockerhub
    steps:
      - name: Delete old tags, keep latest 5
        env:
            DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
            DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
            REPO_NAME: api_app
        run: |
            echo "Fetching tags from Docker Hub..."

            TAGS=$(curl -s -u $DOCKERHUB_USERNAME:$DOCKERHUB_TOKEN \
            "https://hub.docker.com/v2/repositories/$DOCKERHUB_USERNAME/$REPO_NAME/tags/?page_size=100" \
            | jq -r '.results[].name' | grep -v latest)

            echo "Found tags:"
            echo "$TAGS"

            # Sort tags and keep the 5 newest (assuming timestamped versions starting with 'v')
            KEEP_TAGS=$(echo "$TAGS" | grep '^v' | sort -r | head -n 5)
            DELETE_TAGS=$(comm -23 <(echo "$TAGS" | sort) <(echo "$KEEP_TAGS" | sort))

            echo "Tags to keep:"
            echo "$KEEP_TAGS"
            echo "Tags to delete:"
            echo "$DELETE_TAGS"

            for tag in $DELETE_TAGS; do
            echo "Deleting tag: $tag"
            curl -s -u $DOCKERHUB_USERNAME:$DOCKERHUB_TOKEN \
                -X DELETE \
                "https://hub.docker.com/v2/repositories/$DOCKERHUB_USERNAME/$REPO_NAME/tags/$tag/"
            done
  test:
    runs-on: ubuntu-latest
    needs: [build-and-push-to-dockerhub, cleanup-old-tags]
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Test routes
        run: |
          docker compose up -d
          echo "Testing routes..."

          cat > test.sh <<'EOF'
            #!/bin/bash
            ROUTES="/ /shoppinglist /pokemon /dogs /dadjokes /evilinsult /shoppinglist/delete/"
            for route in $ROUTES; do
              echo "Testing route: $route"
              response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:5000$route)
              if [ "$response" -eq 200 ]; then
                echo "Route $route is reachable."
              else
                echo "Route $route failed with status code $response."
                docker compose down
                exit 1
              fi
            done
            docker compose down
            EOF

          chmod +x test.sh
          ./test.sh

