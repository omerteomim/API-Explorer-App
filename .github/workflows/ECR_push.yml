name: Build and Push Images

on:
  push:
    branches:
      - main  
jobs:
  test-image:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      
      - name: run docker compose
        run: |
          docker compose up -d 
      
      - name: Wait for services to be ready
        run: |
          echo "Waiting for services to start..."
          sleep 15
      
      - name: test db connection
        run: |
          echo "testing db connection..."
          docker compose exec -T db pg_isready -U myuser -d mydb
      
      - name: test web
        run: |
          echo "testing web service..."
          docker compose exec -T web curl -f http://localhost:5000 || { 
          docker compose logs web; exit 1; }  

  build-and-push-to-ecr:
    runs-on: ubuntu-latest
    needs: test-image
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up Docker image tag
        id: vars
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          echo "IMAGE_TAG=v${TIMESTAMP}" >> $GITHUB_OUTPUT

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
          
      - name: Build and tag Docker images
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: api-app-dev
          IMAGE_TAG: ${{ steps.vars.outputs.IMAGE_TAG }}
        run: |
          cd flask-app
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker images

      - name: Push Docker images to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: api-app-dev
          IMAGE_TAG: ${{ steps.vars.outputs.IMAGE_TAG }}
        run: |
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest



